description = 'Spring Yarn Boot Apps'
defaultTasks 'build'

apply plugin: 'base'

buildscript {
	repositories {
		mavenLocal()
		maven { url "http://repo.springsource.org/plugins-release" }
	}
	dependencies {
		classpath("org.springframework.build.gradle:docbook-reference-plugin:0.2.6")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
	}
}

allprojects {
	group = 'org.springframework.yarn'
	//logging.captureStandardOutput LogLevel.DEBUG
 
	repositories {
		mavenLocal()
		maven { url 'http://repo.springsource.org/libs-milestone' }
		mavenCentral()
	}
}

def hadoopDefault = "hadoop22"
def hadoopDistro = project.hasProperty("distro") ? project.getProperty("distro") : hadoopDefault
def springDataVersion = hadoop22SpringDataVersion

switch (hadoopDistro) {

	// vanilla hadoop 2.2.x
	case "hadoop22":
		springDataVersion = hadoop22SpringDataVersion
		println "Using Apache Hadoop 2.2.x Spring Hadoop Dependencies - [$springDataVersion]"
	break;

	// pivotal
	case "phd1":
		springDataVersion = phd1SpringDataVersion
		println "Using Pivotal HD 1.0 Spring Hadoop Dependencies - [$springDataVersion]"
	break;

	default:
		if (!project.hasProperty("distro")) {
			println "Using default distro: Apache Hadoop Spring Hadoop Dependencies - [$springDataVersion]"
		} else {
			if (hadoopDistro == hadoopDefault) {
				println "Using Apache Hadoop 2.2.x Spring Hadoop Dependencies - [$springDataVersion]"
			} else {
				println "Failing build: $hadoopDistro is not a supported distro"
				println "Supported distros: hadoop22 and phd1"
				println "* default"
				throw new InvalidUserDataException("$hadoopDistro is not a supported distro")
			}
		}
		springDataVersion = hadoop22SpringDataVersion

}

subprojects { subproject ->
	apply plugin: 'idea'
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'maven'
	apply plugin: 'spring-boot'
	
	sourceCompatibility = 1.6
	targetCompatibility = 1.6
	
	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:-serial", "-Xlint:-options"]

	task sourcesJar(type: Jar) {
		classifier = 'sources'
	}


	springBoot {
		backupSource = true
		//providedConfiguration = 'hadoopprovided'
		//customConfiguration = 'hadoopruntime'
	}

	configurations {
		hadoopruntime.exclude group: 'log4j'
		hadoopruntime.exclude group: 'org.slf4j'
		hadoopruntime.exclude group: 'org.apache.hadoop'
		hadoopruntime.exclude group: 'org.apache.hive'
		hadoopruntime.exclude group: 'commons-logging'
		hadoopruntime.exclude group: 'org.codehaus.jettison'
		hadoopruntime.exclude group: 'com.thoughtworks.xstream'
	}
	
	task testJar(type: Jar) {
		classifier = 'tests'
		from sourceSets.test.output
	}

	task containerJar(type: Jar) {
		appendix = 'container'
		from sourceSets.main.output
		exclude('**/*Appmaster*')
		exclude('**/*Client*')
	}

	task containerZip(type: Jar) {
		appendix = 'container'
		extension = 'zip'
		from sourceSets.main.output
		exclude('**/*Appmaster*')
		exclude('**/*Client*')
	}

	task appmasterJar(type: Jar) {
		appendix = 'appmaster'
		from sourceSets.main.output
		exclude('**/*Container*')
		exclude('**/*Client*')
	}

	task appmasterZip(type: Jar) {
		appendix = 'appmaster'
		extension = 'zip'
		from sourceSets.main.output
		exclude('**/*Container*')
		exclude('**/*Client*')
	}

	task clientJar(type: Jar) {
		appendix = 'client'
		from sourceSets.main.output
		exclude('**/*Appmaster*')
		exclude('**/*Container*')
	}

	task clientBoot(type: BootRepackage, dependsOn: clientJar) {
		withJarTask = clientJar
	}

	task containerBootJar(type: BootRepackage, dependsOn: containerJar) {
		withJarTask = containerJar
	}

	task containerBootZip(type: BootRepackage, dependsOn: containerZip) {
		customConfiguration = "hadoopruntime"
		withJarTask = containerZip
	}

	task appmasterBootJar(type: BootRepackage, dependsOn: appmasterJar) {
		withJarTask = appmasterJar
	}

	task appmasterBootZip(type: BootRepackage, dependsOn: appmasterZip) {
		customConfiguration = "hadoopruntime"
		withJarTask = appmasterZip
	}

	//assemble.dependsOn = ['jar', 'testJar']
	assemble.dependsOn(testJar)

	clean.doLast {ant.delete(dir: "target")}

	jar.enabled = false
	bootRepackage.enabled = false
	//bootRepackage.withJarTask = jar

	task bootJars
	bootJars.dependsOn = [clientBoot,containerBootJar,containerBootZip,appmasterBootJar,appmasterBootZip]

	//build.dependsOn(clientBoot)
	//build.dependsOn(containerBoot)
	//build.dependsOn(appmasterBoot)
	//test.dependsOn(bootJars)
	build.dependsOn(bootJars)

}


project('multi-context-boot') {

	dependencies {

		compile ("org.springframework.data:spring-yarn-boot:$springDataVersion") {
			exclude group: "org.springframework.data", module: "spring-data-hadoop-batch"
		}
		runtime ("org.springframework.data:spring-data-hadoop:$springDataVersion") {
			exclude group: "org.springframework.data", module: "spring-data-hadoop-batch"
		}
		runtime ("org.springframework.data:spring-data-hadoop-core:$springDataVersion") {
			exclude group: "org.springframework.data", module: "spring-data-hadoop-batch"
		}

		runtime "log4j:log4j:$log4jVersion"
		runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
		runtime "org.yaml:snakeyaml:$snakeYamlVersion"
		testCompile "org.springframework.data:spring-yarn-boot-test:$springDataVersion"
		testCompile "org.springframework.data:spring-yarn-test:$springDataVersion"
		testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"

		

		hadoopruntime configurations.runtime
		//hadoopruntime.include group: 'org.apache.hadoop', module: 'hadoop-yarn-common'
	}

	configurations { 
		testRuntime.exclude module: "spring-data-hadoop-batch" 
	} 

}

project('activator-boot') {

	dependencies {

		compile ("org.springframework.data:spring-yarn-boot:$springDataVersion") {
			exclude group: "org.springframework.data", module: "spring-data-hadoop-batch"
		}
		runtime ("org.springframework.data:spring-data-hadoop:$springDataVersion") {
			exclude group: "org.springframework.data", module: "spring-data-hadoop-batch"
		}
		runtime ("org.springframework.data:spring-data-hadoop-core:$springDataVersion") {
			exclude group: "org.springframework.data", module: "spring-data-hadoop-batch"
		}

		runtime "log4j:log4j:$log4jVersion"
		runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
		runtime "org.yaml:snakeyaml:$snakeYamlVersion"
		testCompile "org.springframework.data:spring-yarn-boot-test:$springDataVersion"
		testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"

		

		hadoopruntime configurations.runtime
		//hadoopruntime.include group: 'org.apache.hadoop', module: 'hadoop-yarn-common'
	}

	configurations { 
		testRuntime.exclude module: "spring-data-hadoop-batch" 
	} 

}

project('batch-boot') {

	dependencies {
		compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
		compile "org.springframework.batch:spring-batch-infrastructure:$springBatchVersion"
		compile "org.springframework.data:spring-yarn-batch:$springDataVersion"
		compile "org.springframework.data:spring-yarn-boot:$springDataVersion"
		runtime "org.springframework.data:spring-data-hadoop:$springDataVersion"
		runtime "org.springframework.data:spring-data-hadoop-core:$springDataVersion"

		runtime "org.springframework.boot:spring-boot-starter-batch:$springBootVersion"

		runtime "log4j:log4j:$log4jVersion"


		//runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
		testCompile "org.springframework.data:spring-yarn-boot-test:$springDataVersion"
		testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"

		hadoopruntime configurations.runtime
	}

	configurations {
		compile.exclude group: "org.slf4j", module: "slf4j-log4j12"
		runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"
	}

}

project('batch-restart-db-boot') {

	dependencies {
		compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
		compile "org.springframework.batch:spring-batch-infrastructure:$springBatchVersion"
		compile "org.springframework.data:spring-yarn-batch:$springDataVersion"
		compile "org.springframework.data:spring-yarn-boot:$springDataVersion"
		runtime "org.springframework.data:spring-data-hadoop:$springDataVersion"
		runtime "org.springframework.data:spring-data-hadoop-core:$springDataVersion"

		runtime "org.springframework.boot:spring-boot-starter-batch:$springBootVersion"

		runtime "log4j:log4j:$log4jVersion"
		runtime "mysql:mysql-connector-java:5.1.23"
		runtime "commons-dbcp:commons-dbcp:1.2.2"


		//runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
		testCompile "org.springframework.data:spring-yarn-boot-test:$springDataVersion"
		testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"

		hadoopruntime configurations.runtime
	}

	configurations {
		compile.exclude group: "org.slf4j", module: "slf4j-log4j12"
		runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"
	}

}
